@using PaulSchool.Models
@using PaulSchool.Resources
@model PaulSchool.ViewModels.AttendanceReportViewModel
@{
    ViewBag.Title = "AttendanceView";

}
<h2>
    Details for @ViewBag.CourseName
</h2>
<table>
    <thead>
        <tr>
            <th>
                Attendance Day
            </th>
            @foreach (int attendanceDay in Model.AttendanceDays)
            {
                <th>@attendanceDay
                </th>
            }
            <th>
                Edit Student's Attendance
            </th>
            <th>
                Grade
            </th>
            <th>
                @{
                    if (Model.Course.Completed)
                    {
                        <div>
                            View Grade / Comments
                        </div>
                    }
                    else
                    {
                        <div>
                            Edit Grade / Comments
                        </div>
                    }

                }
                
            </th>
            @{
                if (Model.Course.Completed)
                {
                    <th>
                        Certificate
                    </th>
                }
            }
        </tr>
    </thead>
    <tbody id="@Model.CourseId">
        @foreach (Student student in Model.Students)
        {
            <tr id="@student.StudentID">
                <td>@student.LastName</td>
                @foreach (int attendanceDay in Model.AttendanceDays)
                {
                    <td id="@attendanceDay" class="attendance">
                        <span>
                            @Model.IsPresent(student, attendanceDay)
                        </span>
                    </td>
                }
                <td>
                    @{
                        if (Model.Course.Completed)
                        {
                            <div>
                                Course is completed, unable to edit.
                            </div>
                        }
                        else
                        {
                            @Html.ActionLink("edit", "EditIndividualAttendance", new { id = Model.CourseId, studentId = student.StudentID })
                        }

                    }
                </td>
                <td>
                    @Html.Raw(Model.Enrollments.FirstOrDefault(o => o.StudentID == student.StudentID).Grade)
                </td>
                <td>
                    @{
                        if (Model.Course.Completed)
                        {
                            <div>
                                @Html.ActionLink("View Grade / Comments", "ViewComment", new { studentId = student.StudentID, Model.CourseId })  
                            </div>
                        }
                        else
                        {
                            @Html.ActionLink("Edit Grade / Comments", "EditComment", new { studentId = student.StudentID, Model.CourseId })
                        }

                    }
                </td>
                @{
                if (Model.Course.Completed)
                {
                    <td>
                        @Html.ActionLink("Standard", "CertificateOfAttendance", "Certificate", new { id = Model.Enrollments.First(o => o.Student.StudentID == student.StudentID).EnrollmentID }, null)                         <span> or </span>                        @Html.ActionLink("With line for signature", "CertificateOfAttendanceWSig", "Certificate", new { id = Model.Enrollments.First(o => o.Student.StudentID == student.StudentID).EnrollmentID }, null)
                    </td>
                }
            }
            </tr>
        }
    </tbody>
</table>
@{
    if (User.IsInRole("Instructor") || User.IsInRole("Administrator") || User.IsInRole("SuperAdministrator"))
    {
        <div>
            @{
                if (Model.Course.Completed)
                {
                    <p>
                        This course is complete.
                    </p>
                    if (User.IsInRole("SuperAdministrator"))
                    {
                        @Html.ActionLink("Click here to mark course as incomplete", "UnCompleteCourse", new { id = Model.CourseId }, new { onclick = "return confirm('Are you sure you are ready to mark this Course as Incomplete?');" })
                    }
                }
                else
                {
                    if ((User.IsInRole("Administrator") || User.IsInRole("SuperAdministrator")) || Model.Course.EndDate < DateTime.Now )
                    {
                        <p>
                            @Html.ActionLink("Click here", "CompleteCourse", new {id = Model.CourseId}, new {onclick = "return confirm('Are you sure you are ready to mark this Course as Complete?  You will not be able to edit the attendance, grades, or comments after you do this.');"}) to mark this Course as "Complete."  Doing so will make this Course uneditable.
                        </p>
                    }
                    else
                    {
                        <p>
                            As an Instructor you will have the option to mark this course as completed with a link that will appear here after the end-date of the course has passed.
                        </p>
                    }
                }

            }
            @{
                if (User.IsInRole("Administrator") || User.IsInRole("SuperAdministrator"))
                {
                    if (Model.Course.Archived)
                    {
                        <p>
                            This course is archived.
                        </p>
                        if (User.IsInRole("SuperAdministrator"))
                        {
                            @Html.ActionLink("Click here to remove course from the archive", "UnArchiveCourse", new { id = Model.CourseId }, new { onclick = "return confirm('Are you sure you are ready to UnArchive this Course?');" })
                        }
                    }
                    else
                    {
                        <div>
                            <p>
                                @Html.ActionLink("Click here", "ArchiveCourse", new { id = Model.CourseId }, new { onclick = "return confirm('Are you sure you are ready to Archive this Course?  Administrators will not be able to edit this Course's attendance, grades, or comments after you do this.');" }) to Archive this Course."  Doing so will make this Course uneditable by Administrators.
                            </p>
                        </div>
                    }
                }

            }
        </div>
    }

}

<script type="text/javascript">
    var userId;
    var attendanceDay;
    var isPresent;
    var updateAttendanceUrl;
    var absentText;
    var presentText;
    var courseId;
    $(document).ready(function (event) {
        $(".page *").highlight("absent", "redtext");
    });
    function UpdateAttendance(present) {
        url = updateAttendanceUrl;
        $.ajax({
            type: "POST",
            url: url,
            data: "userId=" + userId + "&attendanceDay=" + attendanceDay + "&courseId=" + courseId + "&present=" + present,
            success: function (data) {
                if (isPresent == absentText) {
                    $('#' + userId).find('.currentClass').text(presentText).removeAttr('class');
                } else {
                    $('#' + userId).find('.currentClass').text(absentText).removeAttr('class').addClass("redtext");
                }
                return true;
            }
        });
    }

    jQuery.fn.highlight = function (str, className) {
        var regex = new RegExp(str, "gi");
        return this.each(function () {
            $(this).contents().filter(function () {
                return this.nodeType == 3 && regex.test(this.nodeValue);
            }).replaceWith(function () {
                return (this.nodeValue || "").replace(regex, function (match) {
                    return "<span class=\"" + className + "\">" + match + "</span>";
                });
            });
        });
    };

</script>